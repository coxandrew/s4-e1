#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'pivotal_tracker'
require 'optparse'
require 'ostruct'
require 'ap'

class OptionParser::TooManyCommands < Exception; end
class OptionParser::InvalidCommand < Exception; end

class Options
  attr_reader :commands

  def initialize
    @commands = []
    @commands << OpenStruct.new(
      :keyword => "status",
      :description => "Show the high-level status of all projects"
    )
    @commands << OpenStruct.new(
      :keyword => "deadlines",
      :description => "List the upcoming deadlines for for all projects"
    )
  end

  def parse!(args)
    options = {}

    optparse = OptionParser.new do |opts|
      opts.banner = "\nusage: pivotaltracker [OPTIONS] <command>"

      opts.separator("")
      opts.separator("options:")

      opts.on("-h", "--help", "Print this help") do
        options[:help] = true
        puts opts
        print_available_commands
      end

      opts.on("-p", "--project PROJECT_ID", "Limit command to a specific PROJECT_ID") do |team|
        options[:team] = team
      end
    end

    optparse.parse!(args)
    return options
  end

  private

  def print_available_commands
    puts "\ncommands:"

    @commands.each do |command|
      print "    #{command.keyword.ljust(33)}"
      print command.description
      puts ""
    end
  end
end

if __FILE__ == $0
  options = {}
  begin
    options = Options.new
    used_options = options.parse!(ARGV)

    if ARGV.length > 1
      raise OptionParser::TooManyCommands
    elsif ARGV.length == 1
      command = ARGV.first
      valid_commands = options.commands.collect do |command|
        command.keyword
      end
      if !valid_commands.include?(command)
        raise OptionParser::InvalidCommand
      end

      pt = PivotalTracker.new(STDOUT)
      pt.send("print_#{command}")
    elsif !used_options[:help]
      options.parse!(["--help"])
    end
  rescue OptionParser::InvalidCommand
    puts "\nInvalid command"
    options.parse!(["--help"])
  rescue OptionParser::InvalidOption
    puts "\nInvalid option"
    options.parse!(["--help"])
  rescue OptionParser::TooManyCommands
    puts "\nToo many commands"
    options.parse!(["--help"])
  end
end
